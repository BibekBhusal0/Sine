name: Create Standardized Release

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., v1.2.3)'
        required: true
        type: string
      overview:
        description: 'Release overview/description'
        required: true
        type: string
      changelog:
        description: 'Change list (separate items with newlines)'
        required: true
        type: string
      create_pr:
        description: 'Create PR to merge with target branch'
        required: false
        type: boolean
        default: false
      target_branch:
        description: 'Target branch for PR (if checkbox is checked)'
        required: false
        type: string
        default: 'main'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate inputs
        run: |
          if [[ "${{ inputs.version_name }}" == "" ]]; then
            echo "Error: Version name is required"
            exit 1
          fi
          
          if [[ "${{ inputs.create_pr }}" == "true" && "${{ inputs.target_branch }}" == "" ]]; then
            echo "Error: Target branch is required when creating PR"
            exit 1
          fi

      - name: Format changelog
        id: format_changelog
        run: |
          # Format changelog with proper markdown
          changelog="${{ inputs.changelog }}"
          formatted_changelog="### âœ¨ Changes\n\n"
          
          # Convert each line to a bullet point
          while IFS= read -r line; do
            if [[ -n "$line" ]]; then
              formatted_changelog="${formatted_changelog}- ${line}\n"
            fi
          done <<< "$changelog"
          
          # Save to output and file
          echo "formatted_changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$formatted_changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Also save to file for release notes
          echo -e "$formatted_changelog" > release_notes.md

      - name: Create release notes
        run: |
          cat > full_release_notes.md << EOF
          # ${{ inputs.version_name }}
          
          ### ðŸ‘€ Overview
          ${{ inputs.overview }}
          
          ${{ steps.format_changelog.outputs.formatted_changelog }}
          
          EOF

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ inputs.version_name }}" -m "${{ inputs.version_name }}: ${{ inputs.overview }}"
          git push origin "${{ inputs.version_name }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.version_name }}
          release_name: ${{ inputs.version_name }}
          body_path: full_release_notes.md
          draft: false
          prerelease: false

      - name: Create PR branch and modify sine.uc.mjs
        if: inputs.create_pr == true
        run: |
          # Create a new branch for the PR
          pr_branch="release-${{ inputs.version_name }}-$(date +%s)"
          git checkout -b "$pr_branch"
          
          # Check if sine.uc.mjs exists
          if [[ ! -f "sine.uc.mjs" ]]; then
            echo "Warning: sine.uc.mjs not found in repository root"
            echo "Creating placeholder file"
            echo "// Version: ${{ inputs.version_name }}" > sine.uc.mjs
          else
            # Update version line in sine.uc.mjs
            # This looks for a line containing "Version:" and updates it
            if grep -q "Version:" sine.uc.mjs; then
              sed -i 's/\/\/ Version:.*/\/\/ Version: ${{ inputs.version_name }}/' sine.uc.mjs
            else
              # If no version line exists, add one at the top
              sed -i '1i// Version: ${{ inputs.version_name }}' sine.uc.mjs
            fi
          fi
          
          # Commit changes
          git add sine.uc.mjs
          git commit -m "Update version to ${{ inputs.version_name }} in sine.uc.mjs"
          git push origin "$pr_branch"
          
          # Store branch name for next step
          echo "PR_BRANCH=$pr_branch" >> $GITHUB_ENV

      - name: Create Pull Request
        if: inputs.create_pr == true
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release ${{ inputs.version_name }} - Update sine.uc.mjs`,
              head: process.env.PR_BRANCH,
              base: '${{ inputs.target_branch }}',
              body: `## Release ${{ inputs.version_name }}
              
              This PR updates the version in sine.uc.mjs to ${{ inputs.version_name }}.
              
              ### Overview
              ${{ inputs.overview }}
              
              ### Changes
              ${{ steps.format_changelog.outputs.formatted_changelog }}
              
              **Auto-generated by release workflow**`
            });
            
            console.log(`Created PR #${pullRequest.number}: ${pullRequest.html_url}`);

      - name: Summary
        run: |
          echo "## Release Created Successfully! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ inputs.version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** Created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** Published on GitHub" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.create_pr }}" == "true" ]]; then
            echo "**PR:** Created to merge with ${{ inputs.target_branch }}" >> $GITHUB_STEP_SUMMARY
            echo "**File Updated:** sine.uc.mjs version line updated" >> $GITHUB_STEP_SUMMARY
          fi
