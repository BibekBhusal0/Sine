name: Update marketplace.json to contain latest data

on:
  workflow_dispatch:
  schedule:
    - cron: "*/60 * * * *" # every 60 minutes (GitHub may throttle more frequent runs)
  push:
    branches:
      - 'main'
      - 'cosine'
  pull_request:
    branches:
      - 'main'
      - 'cosine'
    types: [closed]

permissions:
  contents: write
  actions: read

jobs:
  update-marketplace-json:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Read and update marketplace.json
      run: |
        # Install jq for JSON processing
        sudo apt-get update && sudo apt-get install -y jq curl
        
        # Function to normalize GitHub URLs
        normalize_github_url() {
          local url="$1"
          local branch=""
          local folder=""
          
          # Remove trailing slash
          url="${url%/}"
          
          # Handle different URL formats
          if [[ "$url" =~ ^https://github\.com/([^/]+/[^/]+)(/tree/([^/]+)(.*))?$ ]]; then
            # Full GitHub URL with optional branch and folder
            repo="${BASH_REMATCH[1]}"
            branch="${BASH_REMATCH[3]}"
            folder="${BASH_REMATCH[4]}"
          elif [[ "$url" =~ ^([^/]+/[^/]+)(/tree/([^/]+)(.*))?$ ]]; then
            # Abbreviated format (user/repo) with optional branch and folder
            repo="${BASH_REMATCH[1]}"
            branch="${BASH_REMATCH[3]}"
            folder="${BASH_REMATCH[4]}"
          else
            echo "Invalid GitHub URL format: $url" >&2
            return 1
          fi
          
          # Default to main branch if no branch specified
          if [[ -z "$branch" ]]; then
            branch="main"
          fi
          
          # Remove leading slash from folder if present
          folder="${folder#/}"
          
          echo "$repo|$branch|$folder"
        }
        
        # Function to fetch theme.json from GitHub repository
        fetch_theme_data() {
          local repo="$1"
          local branch="$2"
          local folder="$3"
          local homepage="$4"
          
          echo "Processing repo: $repo, branch: $branch, folder: $folder" >&2
          
          # Construct the path to theme.json
          local theme_path="theme.json"
          if [[ -n "$folder" ]]; then
            theme_path="$folder/theme.json"
          fi
          
          # Check if this is the current repository
          current_repo="${{ github.repository }}"
          if [[ "$repo" == "$current_repo" ]]; then
            echo "Fetching from current repository using local file system" >&2
            
            # For current repo, try to read theme.json directly from filesystem first
            if [[ -f "$theme_path" ]]; then
              echo "Found theme.json at: $theme_path" >&2
              theme_content=$(cat "$theme_path")
            else
              echo "theme.json not found at $theme_path, trying API" >&2
              # Fall back to API for current repo
              local api_url="https://api.github.com/repos/$repo/contents/$theme_path?ref=$branch"
              local response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                                   -H "Accept: application/vnd.github.v3+json" \
                                   "$api_url")
              
              if echo "$response" | jq -e '.message' > /dev/null 2>&1; then
                echo "API request failed: $(echo "$response" | jq -r '.message')" >&2
                # Return a minimal object with just the homepage
                jq -n --arg homepage "$homepage" '{homepage: $homepage}'
                return
              fi
              
              theme_content=$(echo "$response" | jq -r '.content' | base64 -d)
            fi
          else
            echo "Fetching from external repository via API" >&2
            # Try to fetch theme.json from external repository
            local api_url="https://api.github.com/repos/$repo/contents/$theme_path?ref=$branch"
            
            echo "Fetching theme data from: $api_url" >&2
            
            # Try with authentication first
            local response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                                 -H "Accept: application/vnd.github.v3+json" \
                                 "$api_url")
            
            # Check if the request failed due to permissions
            if echo "$response" | jq -e '.message' > /dev/null 2>&1; then
              local error_message=$(echo "$response" | jq -r '.message')
              echo "Error with authenticated request: $error_message" >&2
              
              # If it's a permission error, try without authentication for public repos
              if [[ "$error_message" == *"403"* ]] || [[ "$error_message" == *"denied"* ]] || [[ "$error_message" == *"permission"* ]]; then
                echo "Trying unauthenticated request for public repository..." >&2
                response=$(curl -s -H "Accept: application/vnd.github.v3+json" "$api_url")
                
                # Check if unauthenticated request also failed
                if echo "$response" | jq -e '.message' > /dev/null 2>&1; then
                  echo "Unauthenticated request also failed: $(echo "$response" | jq -r '.message')" >&2
                  # Return a minimal object with just the homepage
                  jq -n --arg homepage "$homepage" '{homepage: $homepage}'
                  return
                fi
              else
                # Return a minimal object with just the homepage
                jq -n --arg homepage "$homepage" '{homepage: $homepage}'
                return
              fi
            fi
            
            # Decode base64 content
            theme_content=$(echo "$response" | jq -r '.content' | base64 -d)
          fi
          
          # Validate JSON
          if ! echo "$theme_content" | jq empty 2>/dev/null; then
            echo "Invalid JSON in theme.json" >&2
            # Return a minimal object with just the homepage
            jq -n --arg homepage "$homepage" '{homepage: $homepage}'
            return
          fi
          
          # Extract only existing fields and add homepage
          echo "$theme_content" | jq --arg homepage "$homepage" '
            . as $original |
            {homepage: $homepage} |
            if $original | has("image") then . + {image: ($original.image // "")} else . end |
            if $original | has("name") then . + {name: ($original.name // "")} else . end |
            if $original | has("version") then . + {version: ($original.version // "")} else . end |
            if $original | has("description") then . + {description: ($original.description // "")} else . end |
            if $original | has("readme") then . + {readme: ($original.readme // "")} else . end |
            if $original | has("fork") then . + {fork: ($original.fork // [""])} else . end |
            if $original | has("notFork") then . + {notFork: ($original.notFork // [""])} else . end |
            if $original | has("os") then . + {os: ($original.os // [""])} else . end
          '
        }
        
        # Ensure data directory exists
        mkdir -p data
        
        # Check if marketplace.json exists in data folder
        if [[ ! -f "data/marketplace.json" ]]; then
          echo "data/marketplace.json not found, creating default structure"
          echo '{}' > data/marketplace.json
        fi
        
        # Read current marketplace.json
        marketplace_content=$(cat data/marketplace.json)
        
        # Ensure we have a valid JSON object
        if ! echo "$marketplace_content" | jq empty 2>/dev/null; then
          echo "Invalid JSON in data/marketplace.json, creating empty object"
          marketplace_content='{}'
        fi
        
        # First pass: Convert string values to objects
        echo "Converting any string values to objects..."
        marketplace_keys=$(echo "$marketplace_content" | jq -r 'keys[]')
        temp_file=$(mktemp)
        echo "$marketplace_content" > "$temp_file"
        
        while IFS= read -r key; do
          if [[ -n "$key" ]]; then
            # Check if the value is a string
            value_type=$(echo "$marketplace_content" | jq -r ".[\"$key\"] | type")
            
            if [[ "$value_type" == "string" ]]; then
              echo "Converting string value for key: $key"
              homepage_url=$(echo "$marketplace_content" | jq -r ".[\"$key\"]")
              
              # Convert string to object with homepage property
              temp_content=$(cat "$temp_file")
              echo "$temp_content" | jq --arg key "$key" --arg homepage "$homepage_url" \
                '.[$key] = {homepage: $homepage}' > "$temp_file"
              
              echo "Converted $key from string to object with homepage: $homepage_url"
            fi
          fi
        done <<< "$marketplace_keys"
        
        # Update marketplace_content with converted values
        marketplace_content=$(cat "$temp_file")
        
        # Second pass: Process each marketplace entry (now all should be objects)
        marketplace_keys=$(echo "$marketplace_content" | jq -r 'keys[]')
        
        while IFS= read -r key; do
          if [[ -n "$key" ]]; then
            echo "Processing marketplace entry: $key"
            
            # Get the homepage URL for this entry
            homepage=$(echo "$marketplace_content" | jq -r ".[\"$key\"].homepage // empty")
            
            if [[ -z "$homepage" ]]; then
              echo "No homepage found for $key, skipping"
              continue
            fi
            
            echo "Homepage for $key: $homepage"
            
            # Normalize the GitHub URL
            if normalized=$(normalize_github_url "$homepage"); then
              repo=$(echo "$normalized" | cut -d'|' -f1)
              branch=$(echo "$normalized" | cut -d'|' -f2)
              folder=$(echo "$normalized" | cut -d'|' -f3)
              
              echo "Normalized - Repo: $repo, Branch: $branch, Folder: $folder"
              
              # Fetch theme data
              theme_data=$(fetch_theme_data "$repo" "$branch" "$folder" "$homepage")
              
              # Update the marketplace entry
              temp_content=$(cat "$temp_file")
              echo "$temp_content" | jq --arg key "$key" --argjson data "$theme_data" \
                '.[$key] = $data' > "$temp_file"
              
              echo "Updated $key with fetched data"
            else
              echo "Failed to normalize URL for $key: $homepage"
            fi
          fi
        done <<< "$marketplace_keys"
        
        # Write the updated content back to data/marketplace.json
        cat "$temp_file" > data/marketplace.json
        rm "$temp_file"
        
        echo "Updated data/marketplace.json successfully"

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are any changes
        if git diff --quiet data/marketplace.json; then
          echo "No changes to data/marketplace.json"
          exit 0
        fi
        
        git add data/marketplace.json
        git commit -m "Update data/marketplace.json with latest marketplace data [skip ci]"
        git push

    - name: Handle errors
      if: failure()
      run: |
        echo "Workflow failed. Check the logs above for details."
        exit 1
